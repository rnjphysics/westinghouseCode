cmake_minimum_required(VERSION 3.8)
project(hw_ctl)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

include_directories(include)



if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message("Setting build type to debug, since no value was provided")
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build." FORCE)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_options(-std=c++14 -O2)
else()
    add_compile_options(-std=c++14 -Wall -Wextra -pedantic -g)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

find_package(
  roscpp
)


add_executable(hwctrl
        src/hwctrl_node.cpp

        src/threads/canbus_thread.cpp
        src/threads/motor_thread.cpp

        src/hardware/motor.cpp

        src/hardware/vesc.cpp


        src/util.cpp
)




#if(CATKIN_ENABLE_TESTING)
 # catkin_add_gtest(hwctrl_tests test/testing.cpp src/util.cpp)
  #target_link_libraries(hwctrl_tests ${catkin_LIBRARIES})
#endif()

# we only want lto if we are in release mode
#if(CMAKE_BUILD_TYPE STREQUAL "Release")
 #   message("Enabling LTO")
  #  set_property(TARGET hwctrl PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
   # set_property(TARGET hwctrl_cal PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
#else()
 #   message("Disabling LTO")
  #  set_property(TARGET hwctrl PROPERTY INTERPROCEDURAL_OPTIMIZATION False)
   # set_property(TARGET hwctrl_cal PROPERTY INTERPROCEDURAL_OPTIMIZATION False)
#endif()

#target_link_libraries(hwctrl ${catkin_LIBRARIES})
#target_link_libraries(hwctrl_cal ${catkin_LIBRARIES})
#target_link_libraries(led_node ${catkin_LIBRARIES})

# for hwctrl executable
#add_dependencies(hwctrl ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(hwctrl hwctrl_generate_messages_cpp)

# for hwctrl_cal executable
#add_dependencies(hwctrl_cal ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(hwctrl_cal hwctrl_generate_messages_cpp)

#add_dependencies(led_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})